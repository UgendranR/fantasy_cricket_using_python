# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fantasygui.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from dialog import Ui_Dialog

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(589, 670)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 60, 561, 91))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.select = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.select.setFont(font)
        self.select.setObjectName("select")
        self.verticalLayout.addWidget(self.select)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.bat = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.bat.setFont(font)
        self.bat.setObjectName("bat")
        self.horizontalLayout.addWidget(self.bat)
        self.bat_count = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.bat_count.setFont(font)
        self.bat_count.setAlignment(QtCore.Qt.AlignCenter)
        self.bat_count.setObjectName("bat_count")
        self.horizontalLayout.addWidget(self.bat_count)
        self.bow = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.bow.setFont(font)
        self.bow.setObjectName("bow")
        self.horizontalLayout.addWidget(self.bow)
        self.bow_count = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.bow_count.setFont(font)
        self.bow_count.setAlignment(QtCore.Qt.AlignCenter)
        self.bow_count.setObjectName("bow_count")
        self.horizontalLayout.addWidget(self.bow_count)
        self.ar = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.ar.setFont(font)
        self.ar.setObjectName("ar")
        self.horizontalLayout.addWidget(self.ar)
        self.ar_count = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ar_count.setFont(font)
        self.ar_count.setAlignment(QtCore.Qt.AlignCenter)
        self.ar_count.setObjectName("ar_count")
        self.horizontalLayout.addWidget(self.ar_count)
        self.wk = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.wk.setFont(font)
        self.wk.setObjectName("wk")
        self.horizontalLayout.addWidget(self.wk)
        self.wk_count = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.wk_count.setFont(font)
        self.wk_count.setAlignment(QtCore.Qt.AlignCenter)
        self.wk_count.setObjectName("wk_count")
        self.horizontalLayout.addWidget(self.wk_count)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(30, 290, 532, 291))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.av_players = QtWidgets.QListWidget(self.horizontalLayoutWidget_2)
        self.av_players.setObjectName("av_players")
        self.horizontalLayout_2.addWidget(self.av_players)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.label_16 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.horizontalLayout_2.addWidget(self.label_16)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.selected_pl = QtWidgets.QListWidget(self.horizontalLayoutWidget_2)
        self.selected_pl.setObjectName("selected_pl")
        self.horizontalLayout_2.addWidget(self.selected_pl)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(330, 180, 231, 91))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_14 = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_6.addWidget(self.label_14)
        self.point_used = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.point_used.setFont(font)
        self.point_used.setAlignment(QtCore.Qt.AlignCenter)
        self.point_used.setObjectName("point_used")
        self.horizontalLayout_6.addWidget(self.point_used)
        self.verticalLayout_3.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_15 = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_9.addWidget(self.label_15)
        self.team = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.team.setFont(font)
        self.team.setStyleSheet("color: rgb(0, 6, 126);")
        self.team.setObjectName("team")
        self.horizontalLayout_9.addWidget(self.team)
        self.verticalLayout_3.addLayout(self.horizontalLayout_9)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(30, 170, 231, 91))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_11 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_4.addWidget(self.label_11)
        self.point_av = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.point_av.setFont(font)
        self.point_av.setAlignment(QtCore.Qt.AlignCenter)
        self.point_av.setObjectName("point_av")
        self.horizontalLayout_4.addWidget(self.point_av)
        self.verticalLayout_2.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.rb1 = QtWidgets.QRadioButton(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Forte")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.rb1.setFont(font)
        self.rb1.setObjectName("rb1")
        self.horizontalLayout_3.addWidget(self.rb1)
        self.rb2 = QtWidgets.QRadioButton(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Forte")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.rb2.setFont(font)
        self.rb2.setObjectName("rb2")
        self.horizontalLayout_3.addWidget(self.rb2)
        self.rb3 = QtWidgets.QRadioButton(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Forte")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.rb3.setFont(font)
        self.rb3.setObjectName("rb3")
        self.horizontalLayout_3.addWidget(self.rb3)
        self.rb4 = QtWidgets.QRadioButton(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Forte")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.rb4.setFont(font)
        self.rb4.setObjectName("rb4")
        self.horizontalLayout_3.addWidget(self.rb4)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.horizontalLayoutWidget_7 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_7.setGeometry(QtCore.QRect(210, 600, 161, 33))
        self.horizontalLayoutWidget_7.setObjectName("horizontalLayoutWidget_7")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_7)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.exit = QtWidgets.QPushButton(self.horizontalLayoutWidget_7)
        font = QtGui.QFont()
        font.setFamily("Copperplate Gothic Bold")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.exit.setFont(font)
        self.exit.setObjectName("exit")
        self.horizontalLayout_11.addWidget(self.exit)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 10, 501, 31))
        font = QtGui.QFont()
        font.setFamily("Constantia")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(203, 16, 35);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 589, 21))
        self.menubar.setObjectName("menubar")
        self.menuManage_Teams = QtWidgets.QMenu(self.menubar)
        self.menuManage_Teams.setObjectName("menuManage_Teams")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNEW_Team = QtWidgets.QAction(MainWindow)
        self.actionNEW_Team.setObjectName("actionNEW_Team")
        self.actionOPEN_Team = QtWidgets.QAction(MainWindow)
        self.actionOPEN_Team.setObjectName("actionOPEN_Team")
        self.actionSAVE_Team = QtWidgets.QAction(MainWindow)
        self.actionSAVE_Team.setObjectName("actionSAVE_Team")
        self.actionEVALUATE_Team = QtWidgets.QAction(MainWindow)
        self.actionEVALUATE_Team.setObjectName("actionEVALUATE_Team")
        self.menuManage_Teams.addAction(self.actionNEW_Team)
        self.menuManage_Teams.addSeparator()
        self.menuManage_Teams.addAction(self.actionOPEN_Team)
        self.menuManage_Teams.addAction(self.actionSAVE_Team)
        self.menuManage_Teams.addSeparator()
        self.menuManage_Teams.addAction(self.actionEVALUATE_Team)
        self.menubar.addAction(self.menuManage_Teams.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.menuManage_Teams.triggered[QtWidgets.QAction].connect(self.menufunction)

        self.exit.clicked.connect(self.quit_app)
    
        self.rb1.toggled.connect(self.category)
        self.rb2.toggled.connect(self.category)
        self.rb3.toggled.connect(self.category)
        self.rb4.toggled.connect(self.category)

        self.rb1.setEnabled(False)  #All radio buttons are disabled in the beginning until
        self.rb2.setEnabled(False)  #new team menu option is selected
        self.rb3.setEnabled(False)
        self.rb4.setEnabled(False)

        self.av_players.itemDoubleClicked.connect(self.select_players)
        self.selected_pl.itemDoubleClicked.connect(self.remove_players)

        self.bat = 0
        self.bwl = 0
        self.ar = 0
        self.wk = 0
        self.av_pts = 1000
        self.used_pts = 0
        self.total_pl = 0

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.select.setText(_translate("MainWindow", "Your Selections"))
        self.bat.setText(_translate("MainWindow", "Batsmen(BAT)"))
        self.bat_count.setText(_translate("MainWindow", "0"))
        self.bow.setText(_translate("MainWindow", "Bowlers(BOW)"))
        self.bow_count.setText(_translate("MainWindow", "0"))
        self.ar.setText(_translate("MainWindow", "Alrounders(AR)"))
        self.ar_count.setText(_translate("MainWindow", "0"))
        self.wk.setText(_translate("MainWindow", "Wicket-keeper(WK)"))
        self.wk_count.setText(_translate("MainWindow", "0"))
        self.label_16.setText(_translate("MainWindow", ">"))
        self.label_14.setText(_translate("MainWindow", "Points Used"))
        self.point_used.setText(_translate("MainWindow", "0"))
        self.label_15.setText(_translate("MainWindow", "Team Name"))
        self.team.setText(_translate("MainWindow", "Displayed Here"))
        self.label_11.setText(_translate("MainWindow", "Points Available"))
        self.point_av.setText(_translate("MainWindow", "1000"))
        self.rb1.setText(_translate("MainWindow", "BAT"))
        self.rb2.setText(_translate("MainWindow", "BOW"))
        self.rb3.setText(_translate("MainWindow", "AR"))
        self.rb4.setText(_translate("MainWindow", "WK"))
        self.exit.setText(_translate("MainWindow", "Exit Application"))
        self.label.setText(_translate("MainWindow", "WELCOME TO FANTASY CRICKET GAME!!!"))
        self.menuManage_Teams.setTitle(_translate("MainWindow", "Manage Teams"))
        self.actionNEW_Team.setText(_translate("MainWindow", "NEW Team"))
        self.actionOPEN_Team.setText(_translate("MainWindow", "OPEN Team"))
        self.actionSAVE_Team.setText(_translate("MainWindow", "SAVE Team"))
        self.actionEVALUATE_Team.setText(_translate("MainWindow", "EVALUATE Team"))

    #Closes the application   
    def quit_app(self):
        self.showdlg('Thank you for visiting...DO COME AGAIN!!!')
        sys.exit()

    #All menu operations are performed here
    def menufunction(self,action):
        txt = (action.text())
        if txt=='NEW Team':        
            sql="SELECT name FROM teams;"
            try:
                cur.execute(sql)
                result=cur.fetchall()
                name,ok=QtWidgets.QInputDialog.getText(MainWindow, "Team", "Enter name of team:") #Dialog to enter teamName
                teamName=(name,)
                if ok and name=="":
                    self.showdlg("Teamname can't be empty!!!")  #Popup if teamName column is left empty and ok is pressed
                elif teamName in result:
                    self.showdlg("Team with this name already exists!!!")  #Popup if the teamName already exists
                elif ok and name!="":
                    self.team.setText(str(name))
                    self.rb1.setEnabled(True)
                    self.rb2.setEnabled(True)
                    self.rb3.setEnabled(True)
                    self.rb4.setEnabled(True)

                    self.bat=0
                    self.bwl=0
                    self.ar=0
                    self.wk=0
                    self.av_pts=1000
                    self.used_pts=0
                    self.total_pl=0
                    self.av_players.clear()
                    self.selected_pl.clear()
                    
                self.show_count()
            except:
                pass

        if txt=='SAVE Team':
            if self.total_pl<11:                  
                self.showdlg("The team must consist of 11 players")  #Team can't be saved until it consists of 11 players
            else:
                sql="SELECT name FROM teams;"
                try:
                    cur.execute(sql)
                    result=cur.fetchall()
                    teamName=(self.team.text(),)  #If a user modifies already saved team and 
                    if teamName in result:        #wants to save this changed team with the same name
                        try:
                            sql="DELETE FROM teams WHERE name='"+self.team.text()+"';"  #The previously existing team is deleted 
                            cur.execute(sql)                                            #and new modified team is saved
                            Mydb.commit()
                        except:
                            Mydb.rollback()
                    players = []
                    for i in range(self.selected_pl.count()):
                        players.append(self.selected_pl.item(i).text())
                    my_players = ",".join(players)
                    try:
                        cur.execute("INSERT INTO teams(name,player,value) VALUES(?,?,?);",(self.team.text(),my_players,self.used_pts))
                        Mydb.commit()                                      #Team gets saved in the database.If not,message is displayed
                        self.showdlg("Your team is saved")
                    except:
                        self.showdlg("Some Error occurred")
                        Mydb.rollback()
                except:
                    pass

        if txt=='OPEN Team':
            sql="SELECT name FROM teams"
            try:
                cur.execute(sql)
                result = cur.fetchall()
                teamnames = []
                
                for i in result:
                    teamnames.append(i[0])
                item,ok = QtWidgets.QInputDialog.getItem(MainWindow, "OpenTeam", 
                 "Select any team to open",teamnames,0,False)                   #Dialog with teamNames is displayed
                            
                if ok and item:
                    self.team.setText(item)
                    self.av_players.clear()
                    self.selected_pl.clear()
                    self.bat=0
                    self.bwl=0
                    self.ar=0
                    self.wk=0
                    self.total_pl=11

                    self.rb1.setEnabled(True) #If the user selects OPEN Team menu in the starting,
                    self.rb2.setEnabled(True) #then all radio buttons are enabled
                    self.rb3.setEnabled(True)
                    self.rb4.setEnabled(True)
                
                    sql="SELECT player,value FROM teams WHERE name='"+item+"';"    
                    cur.execute(sql)
                    result = cur.fetchone()
                    players = result[0].split(",")
                    for i in players:
                        sql="SELECT ctg FROM stats WHERE player='"+i+"';"
                        try:
                            cur.execute(sql)
                            category = cur.fetchone()
                            if category[0]=="BAT":self.bat+=1
                            if category[0]=="BWL":self.bwl+=1
                            if category[0]=="AR":self.ar+=1
                            if category[0]=="WK":self.wk+=1    #Players of the selected team are displayed along with all counts
                            self.selected_pl.addItem(i)        #and points
                        except:                                
                            pass
                    self.used_pts=int(result[1])
                    self.av_pts=1000-self.used_pts
                self.show_count()
            except:
                pass

        if txt=='EVALUATE Team':
            Dialog = QtWidgets.QDialog()  #New dialog box for evaluating your saved team
            ui = Ui_Dialog()
            ui.setupUi(Dialog)
            ret=Dialog.exec()

    #Displays players in both the lists  
    def players_list(self,ctg):
        self.av_players.clear()
        sql = "SELECT Player from stats where ctg = '"+ctg+"';"
        try:
            cur.execute(sql)
            result = cur.fetchall()
            selected_players = []
            for i in range(self.selected_pl.count()):    
                selected_players.append(self.selected_pl.item(i).text())  
            for record in result:
                if record[0] not in selected_players:  #If the player is not selected then displayed in 
                    self.av_players.addItem(record[0]) #available players list
        except:
            pass

    #Category of player is decided           
    def category(self):
        self.ctg = ''
        if self.rb1.isChecked()==True:
            ctg = 'BAT'
        elif self.rb2.isChecked()==True:
            ctg = 'BWL'
        elif self.rb3.isChecked()==True:
            ctg = 'AR'
        elif self.rb4.isChecked()==True:
            ctg = 'WK'

        self.players_list(ctg)

    #To select players
    def select_players(self,item):
        self.res = self.display_msg(item.text())
        if self.res==1:                             #If no game rule is violated,then player can be selected
            self.av_players.takeItem(self.av_players.row(item))
            self.selected_pl.addItem(item.text())
            sql = "SELECT ctg,value FROM stats WHERE player='"+item.text()+"';"
            try:
                cur.execute(sql)
                ctg_val = cur.fetchone()
                if ctg_val[0]=="BAT":self.bat+=1
                if ctg_val[0]=="BWL":self.bwl+=1
                if ctg_val[0]=="AR":self.ar+=1
                if ctg_val[0]=="WK":self.wk+=1
                self.total_pl+=1
                self.av_pts-=int(ctg_val[1])
                self.used_pts+=int(ctg_val[1])
                self.show_count()
                if self.total_pl==10 and self.wk==0:  #Reminder for the user to add one wicketkeeper in the team if not added
                    self.showdlg("Reminder!!!You should add one wicketkeeper to your team")
            except:
                pass
        else:
            pass
        
    #To remove selected players    
    def remove_players(self,item):
        self.selected_pl.takeItem(self.selected_pl.row(item))
        sql = "SELECT ctg,value FROM stats WHERE player='"+item.text()+"';"
        try:
            cur.execute(sql)
            ctg_val = cur.fetchone()
            if ctg_val[0]=="BAT":self.bat-=1
            if ctg_val[0]=="BWL":self.bwl-=1
            if ctg_val[0]=="AR":self.ar-=1
            if ctg_val[0]=="WK":self.wk-=1
            self.total_pl-=1
            self.used_pts-=int(ctg_val[1])
            self.av_pts+=int(ctg_val[1])
        except:
            pass

        if self.rb1.isChecked()==True and ctg_val[0]=="BAT":    #Players are added in available players list if category of removed player matches 
            self.av_players.addItem(item.text())                #the radio button checked
        elif self.rb2.isChecked()==True and ctg_val[0]=="BWL":
            self.av_players.addItem(item.text())
        elif self.rb3.isChecked()==True and ctg_val[0]=="AR":
            self.av_players.addItem(item.text())
        elif self.rb4.isChecked()==True and ctg_val[0]=="WK":
            self.av_players.addItem(item.text())

        self.show_count()

    #Displays the counts and points
    def show_count(self):
        self.bat_count.setText(str(self.bat))
        self.bow_count.setText(str(self.bwl))
        self.ar_count.setText(str(self.ar))
        self.wk_count.setText(str(self.wk))
        self.point_av.setText(str(self.av_pts))
        self.point_used.setText(str(self.used_pts))

    #Displays a Dialog(Popup) with the desired msg 
    def showdlg(self,msg):
        Dialog = QtWidgets.QMessageBox()
        Dialog.setText(msg)
        Dialog.setWindowTitle('Message')
        ret=Dialog.exec()

    #Is checked before any player is selected
    #Displays the appropriate msg
    def display_msg(self,text):
        self.flag=1
        self.ctg = ''
        if self.rb1.isChecked()==True:
            ctg = 'BAT'
        elif self.rb2.isChecked()==True:
            ctg = 'BWL'
        elif self.rb3.isChecked()==True:
            ctg = 'AR'
        elif self.rb4.isChecked()==True:
            ctg = 'WK'
        if self.total_pl>=11:
            self.flag=0
            self.showdlg("You can't select more than 11 players")
        if self.bat>=5 and ctg=="BAT":
            self.flag=0
            self.showdlg("There can't be more than 5 batsmen")
        if self.bwl>=5 and ctg=="BWL":
            self.flag=0
            self.showdlg("There can't be more than 5 bowlers")
        if self.wk>=1 and ctg=="WK":
            self.flag=0
            self.showdlg("There can't be more than 1 wicketkeeper")
        if self.ar>=1 and ctg=="AR":
            self.flag=0
            self.showdlg("There can't be more than 1 alrounder")

        sql = "SELECT value FROM stats WHERE player='"+text+"';"
        try:
            cur.execute(sql)
            result = cur.fetchone()
            if self.av_pts-int(result[0])<=0 and self.total_pl!=11:    #If the points left is less than the value of player selected
                self.flag=0                                            #Popup displayed
                self.showdlg("Insufficient points...Kindly change your selected players to continue selecting")
        except:
            pass
        return self.flag

    
if __name__ == "__main__":
    import sys
    import sqlite3
    Mydb = sqlite3.connect('FantasyCricket.db')
    cur = Mydb.cursor()
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
